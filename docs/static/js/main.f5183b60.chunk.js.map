{"version":3,"sources":["serviceWorker.ts","actions.ts","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","actions","label","url","getAction","shuffled","array","newArray","i","length","j","Math","floor","random","shuffleArray","CenteredPage","styled","Page","ActionDisplay","Paragraph","ShowAction","action","href","App","React","setAction","primary","onClick","updateAction","oldAction","newAction","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kCCZOC,EAAoB,CAC/B,CACEC,MAAO,iBAET,CACEA,MAAO,qBAET,CACEA,MAAO,2BAET,CACEA,MAAO,SAET,CACEA,MAAO,kBACPC,IAAK,qCAEP,CACED,MAAO,qBACPC,IAAK,2BAEP,CACED,MAAO,eAET,CACEA,MAAO,iCACPC,IAAK,6BAEP,CACED,MAAO,sBAET,CACEA,MAAO,uBAET,CACEA,MAAO,oBAET,CACEA,MAAO,sBAET,CACEA,MAAO,8BACPC,IAAK,uBAaIC,EAAY,WACvB,IAAMC,EAVa,SAAIC,GAEvB,IADA,IAAMC,EAAQ,YAAOD,GACZE,EAAID,EAASE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC5C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADE,EAEf,CAACD,EAASG,GAAIH,EAASC,IAAnDD,EAASC,GAFkC,KAE9BD,EAASG,GAFqB,KAI9C,OAAOH,EAIUO,CAAqBb,GACtC,OAAOI,EAASM,KAAKC,MAAMD,KAAKE,UAAYR,EAASI,OAAS,M,0cChDhE,IAAMM,EAAeC,YAAOC,IAAPD,CAAH,KAIZE,EAAgBF,YAAOG,IAAPH,CAAH,KAYbI,EAAa,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,OACnB,OAAOA,EACL,gBAACH,EAAD,KAEIG,EAAOlB,IACH,gBAAC,IAAD,CAAMmB,KAAMD,EAAOlB,KAAMkB,EAAOnB,OAChCmB,EAAOnB,OAGZ,kCAgCQqB,EA7BO,WAAO,IAAD,EACEC,aADF,mBACnBH,EADmB,KACXI,EADW,KAa1B,OACE,gBAACV,EAAD,KACE,gBAAC,IAAD,sBACA,gBAAC,EAAD,CAAYM,OAAQA,IACpB,gBAAC,IAAD,KACE,gBAAC,IAAD,CACEK,SAAUL,EACVM,QAjBa,SAAfC,IACJ,IAAMC,EAAYR,EACZS,EAAY1B,IACbyB,GAAcA,EAAU3B,QAAU4B,EAAU5B,MAG/C0B,IAFAH,EAAUK,KAeLT,EAAS,OAAS,IAJrB,wBAI+CA,EAAS,SAAW,GAJnE,qB,eCpDRU,EAASC,OACP,gBAAC,aAAD,KACE,gBAAC,IAAD,MACA,gBAAC,IAAD,MACA,gBAAC,EAAD,OAEFC,SAASC,eAAe,SH4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f5183b60.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'}\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","\nexport type Action = {\n  label: string\n  url?: string\n}\n\nexport const actions: Action[] = [\n  {\n    label: 'Do the dishes',\n  },\n  {\n    label: 'Get to inbox zero',\n  },\n  {\n    label: 'Close some browser tabs',\n  },\n  {\n    label: 'Sweep',\n  },\n  {\n    label: 'Read HackerNews',\n    url: 'https://news.ycombinator.com/news',\n  },\n  {\n    label: 'Watch some youtube',\n    url: 'https://www.youtube.com',\n  },\n  {\n    label: 'Read a book',\n  },\n  {\n    label: 'Read some stuff in your Pocket',\n    url: 'https://app.getpocket.com',\n  },\n  {\n    label: 'Take a dance break',\n  },\n  {\n    label: 'Tidy up the kitchen',\n  },\n  {\n    label: 'Browse Instagram',\n  },\n  {\n    label: 'Take out the trash',\n  },\n  {\n    label: 'Clean up your trello boards',\n    url: 'https://trello.com',\n  }\n]\n\nconst shuffleArray = <T>(array: T[]): T[] => {\n  const newArray = [...array]\n  for (let i = newArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [newArray[i], newArray[j]] = [newArray[j], newArray[i]]\n  }\n  return newArray\n}\n\nexport const getAction = (): Action => {\n  const shuffled = shuffleArray<Action>(actions)\n  return shuffled[Math.floor(Math.random() * (shuffled.length - 1))]\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport {\n  Action,\n  getAction,\n} from './actions'\nimport {\n  Button,\n  Header,\n  Link,\n  Page,\n  Paragraph,\n} from '@chadlavi/clear'\n\n\nconst CenteredPage = styled(Page)`\n  text-align: center;\n`\n\nconst ActionDisplay = styled(Paragraph)`\n  font-size: 1.5rem;\n  font-weight: bold;\n  padding: calc(var(--clear-unit) * 3);\n  border: 1px solid var(--clear-border);\n  border-radius: calc(var(--clear-unit) * 2);\n  background: var(--clear-zebra);\n  width: calc(var(--clear-unit) * 64);\n  max-width: 100%;\n  margin: auto;\n`\n\nconst ShowAction = ({action}: {action?: Action}): JSX.Element => {\n  return action ? (\n    <ActionDisplay>\n      {\n        action.url\n          ? <Link href={action.url}>{action.label}</Link>\n          : action.label\n      }\n    </ActionDisplay>\n  ) : (<></>)\n}\n\nconst App: React.FC = () => {\n  const [action, setAction] = React.useState<Action | undefined>()\n\n  const updateAction = (): void => {\n    const oldAction = action\n    const newAction = getAction()\n    if (!oldAction || (oldAction.label !== newAction.label)) {\n      setAction(newAction)\n    } else {\n      updateAction()\n    }\n  }\n\n  return (\n    <CenteredPage>\n      <Header>You should...</Header>\n      <ShowAction action={action} />\n      <Paragraph>\n        <Button\n          primary={!action}\n          onClick={updateAction}\n        >\n          {action ? 'Or c' : 'C'}lick me to generate a{action ? 'nother' : ''} random action\n        </Button>\n      </Paragraph>\n    </CenteredPage>\n  )\n}\n\nexport default App\n","import * as React from 'react'\nimport * as serviceWorker from './serviceWorker'\nimport App from './App'\nimport ReactDOM from 'react-dom'\nimport {\n  CSSVariables,\n  GlobalStyles,\n} from '@chadlavi/clear'\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <CSSVariables />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}